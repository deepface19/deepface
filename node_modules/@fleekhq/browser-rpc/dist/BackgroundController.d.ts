/// <reference types="chrome" />
import { CallID, ErrorRes, ReqMessage, ResMessage } from './types';
declare type EnhancedResMessage = ResMessage & {
    targetPorts?: string | string[];
};
declare type Message = ReqMessage | EnhancedResMessage;
declare type HandlerProps = {
    sender: {
        id: string;
        tabId: number;
        frameId: number;
        name: string;
        port: chrome.runtime.Port;
    };
    ports: Map<string, chrome.runtime.Port>;
    message: Message;
    callback: (err: ErrorRes | null, res: any, targetPorts?: {
        portId: string;
        callId: CallID;
    }[]) => void;
};
declare type ControllerHandler = (props: HandlerProps, ...args: any[]) => void;
declare type BackgroundControllerConfig = {
    name: string;
    trustedSources: string | string[];
    controllers?: {
        [name: string]: ControllerHandler;
    };
};
export default class BackgroundController {
    private name;
    private trustedSources;
    private ports;
    private controllers;
    constructor(config: BackgroundControllerConfig);
    exposeController(name: string, controller: ControllerHandler): void;
    removeController(name: string): boolean;
    private callController;
    private sendPortResponse;
    private buildResMessage;
    private sendResponse;
    private onPortMessage;
    private onConnectListener;
    private onTabRemoved;
    private updatePorts;
    start(): void;
    stop(): void;
}
export {};
