"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const extensionizer_1 = __importDefault(require("extensionizer"));
const RPC_1 = __importDefault(require("./RPC"));
const constants_1 = require("./constants");
class ProxyRPC extends RPC_1.default {
    constructor(win, config) {
        super(config);
        this.port = undefined;
        this.win = win;
        this.proxyResponse = this.proxyResponse.bind(this);
        this.receiveMessage = this.receiveMessage.bind(this);
    }
    proxyResponse(resMessage) {
        resMessage.target = this.target;
        resMessage.data.name = this.name;
        this.sendMessage(resMessage);
    }
    sendPortMessage(message) {
        if (this.port) {
            this.port.postMessage(message);
        }
    }
    sendMessage(message) {
        this.win.postMessage(message, '*');
    }
    receiveMessage(event) {
        super.onMessage(event.data);
    }
    onRequestMessage(message) {
        const resMessage = {
            target: this.target,
            data: {
                name: this.name,
                data: {
                    id: message.data.data.id,
                    jsonrpc: constants_1.JSON_RPC_VERSION,
                },
            },
        };
        try {
            const handler = this.handlers.get(message.data.data.method);
            if (!handler) {
                this.sendPortMessage(message);
                return;
            }
            const callback = (err, res) => {
                if (err) {
                    resMessage.data.data.error = err;
                    this.sendMessage(resMessage);
                    return;
                }
                resMessage.data.data.result = res;
                this.sendMessage(resMessage);
            };
            handler({
                callback,
                message,
            }, ...message.data.data.params);
        }
        catch (error) {
            if (resMessage.data.data.hasOwnProperty('error'))
                return;
            if (resMessage.data.data.hasOwnProperty('result'))
                return;
            resMessage.data.data.error = {
                code: constants_1.JSON_RPC_ERROR_CODES.SERVER_ERROR,
                message: error.toString(),
            };
            this.sendMessage(resMessage);
        }
        ;
    }
    start() {
        this.win.addEventListener('message', this.receiveMessage);
        this.port = extensionizer_1.default.runtime.connect({ name: this.name });
        if (this.port) {
            this.port.onMessage.addListener(this.proxyResponse);
        }
    }
    stop() {
        super.stop();
        this.win.removeEventListener('message', this.receiveMessage);
        if (this.port) {
            this.port.onMessage.removeListener(this.proxyResponse);
        }
    }
}
;
exports.default = ProxyRPC;
