var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
import { v4 as uuid } from 'uuid';
import { validateMessageSchema } from './helpers';
import { JSON_RPC_VERSION, JSON_RPC_ERROR_CODES } from './constants';
var RPC = (function () {
    function RPC(config) {
        this.timeout = 5000;
        this.handlers = new Map();
        this.calls = new Map();
        this.name = config.name;
        this.target = config.target;
        if (config.timeout) {
            this.timeout = config.timeout;
        }
        if (config.handlers) {
            for (var _i = 0, _a = Object.entries(config.handlers); _i < _a.length; _i++) {
                var _b = _a[_i], name_1 = _b[0], handler = _b[1];
                this.handlers.set(name_1, handler);
            }
        }
    }
    ;
    RPC.prototype.exposeHandler = function (name, handler) {
        this.handlers.set(name, handler);
    };
    RPC.prototype.removeHandler = function (name) {
        return this.handlers.delete(name);
    };
    RPC.prototype._call = function (handler, target, timeout, args) {
        return __awaiter(this, void 0, void 0, function () {
            var id, message;
            var _this = this;
            return __generator(this, function (_a) {
                id = uuid();
                message = {
                    target: target,
                    data: {
                        name: this.name,
                        data: {
                            id: id,
                            jsonrpc: JSON_RPC_VERSION,
                            method: handler,
                            params: args,
                        },
                    },
                };
                return [2, new Promise(function (resolve, reject) {
                        var resolver = function (err, res) {
                            if (err) {
                                reject(new Error(err.message));
                                return;
                            }
                            resolve(res);
                        };
                        var timer;
                        if (timeout > 0) {
                            timer = setTimeout(function () {
                                if (_this.calls.has(id)) {
                                    _this.calls.delete(id);
                                    resolver({
                                        code: JSON_RPC_ERROR_CODES.TIMEOUT_ERROR,
                                        message: 'Request Timeout',
                                    });
                                }
                            }, timeout);
                        }
                        ;
                        _this.calls.set(id, { resolver: resolver, timer: timer });
                        _this.sendMessage(message);
                    })];
            });
        });
    };
    RPC.prototype.call = function (handler, args, config) {
        return __awaiter(this, void 0, void 0, function () {
            var timeout;
            return __generator(this, function (_a) {
                timeout = this.timeout;
                if (config && typeof config.timeout === 'number') {
                    timeout = config.timeout;
                }
                return [2, this._call(handler, (config === null || config === void 0 ? void 0 : config.target) || this.target, timeout, args || [])];
            });
        });
    };
    RPC.prototype.onMessage = function (eventMessage) {
        var _a = validateMessageSchema(eventMessage), type = _a.type, isValid = _a.isValid;
        if (!isValid)
            return;
        var message = eventMessage;
        if (message.target === this.name && this.target === message.data.name) {
            switch (type) {
                case 'req':
                    this.onRequestMessage(message);
                    break;
                case 'res':
                    this.onResponseMessage(message);
                    break;
            }
        }
    };
    RPC.prototype.onRequestMessage = function (message) {
        var _this = this;
        var resMessage = {
            target: this.target,
            data: {
                name: this.name,
                data: {
                    id: message.data.data.id,
                    jsonrpc: JSON_RPC_VERSION,
                },
            },
        };
        try {
            var handler = this.handlers.get(message.data.data.method);
            if (!handler) {
                resMessage.data.data.error = {
                    code: JSON_RPC_ERROR_CODES.METHOD_NOT_FOUND,
                    message: "Method " + message.data.data.method + " does not exist",
                };
                this.sendMessage(resMessage);
                return;
            }
            var callback = function (err, res) {
                if (err) {
                    resMessage.data.data.error = err;
                    _this.sendMessage(resMessage);
                    return;
                }
                resMessage.data.data.result = res;
                _this.sendMessage(resMessage);
            };
            handler.apply(void 0, __spreadArray([{
                    callback: callback,
                    message: message,
                }], message.data.data.params));
        }
        catch (error) {
            if (resMessage.data.data.hasOwnProperty('error'))
                return;
            if (resMessage.data.data.hasOwnProperty('result'))
                return;
            resMessage.data.data.error = {
                code: JSON_RPC_ERROR_CODES.SERVER_ERROR,
                message: error.toString(),
            };
            this.sendMessage(resMessage);
        }
        ;
    };
    RPC.prototype.onResponseMessage = function (message) {
        var _a = message.data.data, id = _a.id, error = _a.error, result = _a.result;
        var call = this.calls.get(id);
        if (!call)
            return;
        if (call.timer) {
            clearTimeout(call.timer);
        }
        call.resolver(error, result);
        this.calls.delete(id);
    };
    RPC.prototype.stop = function () {
        this.calls.forEach(function (call) {
            if (call.timer) {
                clearTimeout(call.timer);
            }
            call.resolver({
                message: 'RPC stopped',
                code: JSON_RPC_ERROR_CODES.INTERNAL_ERROR,
            });
        });
        this.calls.clear();
    };
    return RPC;
}());
export default RPC;
;
