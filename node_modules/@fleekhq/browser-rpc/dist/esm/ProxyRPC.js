var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
import extension from 'extensionizer';
import RPC from './RPC';
import { JSON_RPC_VERSION, JSON_RPC_ERROR_CODES } from './constants';
var ProxyRPC = (function (_super) {
    __extends(ProxyRPC, _super);
    function ProxyRPC(win, config) {
        var _this = _super.call(this, config) || this;
        _this.port = undefined;
        _this.win = win;
        _this.proxyResponse = _this.proxyResponse.bind(_this);
        _this.receiveMessage = _this.receiveMessage.bind(_this);
        return _this;
    }
    ProxyRPC.prototype.proxyResponse = function (resMessage) {
        resMessage.target = this.target;
        resMessage.data.name = this.name;
        this.sendMessage(resMessage);
    };
    ProxyRPC.prototype.sendPortMessage = function (message) {
        if (this.port) {
            this.port.postMessage(message);
        }
    };
    ProxyRPC.prototype.sendMessage = function (message) {
        this.win.postMessage(message, '*');
    };
    ProxyRPC.prototype.receiveMessage = function (event) {
        _super.prototype.onMessage.call(this, event.data);
    };
    ProxyRPC.prototype.onRequestMessage = function (message) {
        var _this = this;
        var resMessage = {
            target: this.target,
            data: {
                name: this.name,
                data: {
                    id: message.data.data.id,
                    jsonrpc: JSON_RPC_VERSION,
                },
            },
        };
        try {
            var handler = this.handlers.get(message.data.data.method);
            if (!handler) {
                this.sendPortMessage(message);
                return;
            }
            var callback = function (err, res) {
                if (err) {
                    resMessage.data.data.error = err;
                    _this.sendMessage(resMessage);
                    return;
                }
                resMessage.data.data.result = res;
                _this.sendMessage(resMessage);
            };
            handler.apply(void 0, __spreadArray([{
                    callback: callback,
                    message: message,
                }], message.data.data.params));
        }
        catch (error) {
            if (resMessage.data.data.hasOwnProperty('error'))
                return;
            if (resMessage.data.data.hasOwnProperty('result'))
                return;
            resMessage.data.data.error = {
                code: JSON_RPC_ERROR_CODES.SERVER_ERROR,
                message: error.toString(),
            };
            this.sendMessage(resMessage);
        }
        ;
    };
    ProxyRPC.prototype.start = function () {
        this.win.addEventListener('message', this.receiveMessage);
        this.port = extension.runtime.connect({ name: this.name });
        if (this.port) {
            this.port.onMessage.addListener(this.proxyResponse);
        }
    };
    ProxyRPC.prototype.stop = function () {
        _super.prototype.stop.call(this);
        this.win.removeEventListener('message', this.receiveMessage);
        if (this.port) {
            this.port.onMessage.removeListener(this.proxyResponse);
        }
    };
    return ProxyRPC;
}(RPC));
;
export default ProxyRPC;
