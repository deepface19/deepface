var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import extension from 'extensionizer';
import RPC from './RPC';
var PortRPC = (function (_super) {
    __extends(PortRPC, _super);
    function PortRPC(config) {
        var _this = _super.call(this, config) || this;
        _this.port = undefined;
        _this.receiveMessage = _this.receiveMessage.bind(_this);
        return _this;
    }
    PortRPC.prototype.sendMessage = function (message) {
        if (this.port) {
            this.port.postMessage(message);
        }
    };
    PortRPC.prototype.receiveMessage = function (message) {
        _super.prototype.onMessage.call(this, message);
    };
    PortRPC.prototype.start = function () {
        this.port = extension.runtime.connect({ name: this.name });
        if (this.port) {
            this.port.onMessage.addListener(this.receiveMessage);
        }
    };
    PortRPC.prototype.stop = function () {
        _super.prototype.stop.call(this);
        if (this.port) {
            this.port.onMessage.removeListener(this.receiveMessage);
        }
    };
    return PortRPC;
}(RPC));
;
export default PortRPC;
