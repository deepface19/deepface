/// <reference types="node" />
export declare type CallID = string | number;
export declare type ErrorRes = {
    code: number;
    message: string;
    data?: any;
};
export interface RpcBaseData {
    id: CallID;
    jsonrpc: '2.0';
}
export interface RpcResData extends RpcBaseData {
    result?: any;
    error?: ErrorRes;
}
export interface RpcReqData extends RpcBaseData {
    method: string;
    params: any[];
}
export declare type ReqMessage = {
    target: string;
    data: {
        name: string;
        data: RpcReqData;
    };
};
export declare type ResMessage = {
    target: string;
    data: {
        name: string;
        data: RpcResData;
    };
};
export declare type Message = ReqMessage | ResMessage;
export declare type Resolver = (err?: ErrorRes, res?: any) => void;
export declare type ResolverObject = {
    resolver: Resolver;
    timer: undefined | NodeJS.Timeout;
};
export declare type CallBackHandler = (err: null | ErrorRes, res?: null | any) => void;
export declare type HandlerProps = {
    callback: CallBackHandler;
    message: ReqMessage;
};
export declare type Handler = (props: HandlerProps, ...args: any[]) => any;
export declare type CallConfigObject = {
    timeout?: number;
    target?: string;
};
export declare type ValidationMessageObject = {
    isValid: boolean;
    type: 'req' | 'res' | null;
};
export interface RpcConfig {
    name: string;
    target: string;
    timeout?: number;
    handlers?: {
        [name: string]: Handler;
    };
}
