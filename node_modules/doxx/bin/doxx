#!/usr/bin/env node
"use strict";

var program = require('commander'),
    fs      = require('fs'),
    path    = require('path'),
    mkdirp  = require('mkdirp'),
    _       = require('lodash'),
    marked  = require('marked'),

    dir     = require('../lib/dir'),
    parse   = require('../lib/parser'),
    compile = require('../lib/compile'),
    symbols = require('../lib/symbols'),

    version = require('../package').version;

/**
 * Options & Defaults
 */
var ignoredDirs = 'test,public,static,views,templates',
    pkg,
    target_extension = 'html';

program
  .version(version)
  // .option('-r, --raw', 'output \'raw\' comments, leaving the markdown intact')
  .option('-d, --debug', 'output parsed comments for debugging')
  .option('-t, --title <string>', 'The title for the page produced')
  .option('-s, --source <source>', 'The folder which should get parsed')
  .option('-i, --ignore <directories>', 'Comma seperated list of directories to ignore. Default: ' + ignoredDirs)
  .option('-T, --target <target>', 'The folder which will contain the results. Default: <process.cwd()>/docs')
  .option('-e, --target_extension <target_extension>', 'Target files extension. Default: ' + target_extension)
  .option('--template <jade template>', 'The jade template file to use')
  .option('-R --readme <file>', 'The markdown file to use on the main page of the documentations. Checks the current directory for a package.json or README.md by default')

function showHelp(){
  console.log('  Examples:\n');
  console.log('    # parse a whole folder');
  console.log('    $ doxx --source ./lib --target ./docs\n');
  console.log('    # parse a whole folder and use a specific template');
  console.log('    $ doxx --template ./view/myowntpl.jade --source lib --target docs');
}

// examples
program.on('--help', showHelp);

// parse argv
program.parse(process.argv);

if(program.target_extension){
  target_extension = program.target_extension;
}

if(program.template){
  compile.tpl = fs.readFileSync(program.template).toString();
  compile.tplFileName = program.template;
}

if (!program.source) {
  console.error("  Error you must define a source\n");
  return showHelp();
}

var target = path.resolve(process.cwd(), program.target) || process.cwd() + '/docs',
    source = path.resolve(process.cwd(), program.source),
    ignore = program.ignore || ignoredDirs;

// Cleanup and turn into an array the ignoredDirs
ignore     = ignore.trim().replace(' ','').split(',');

// Find, cleanup and validate all potential files
var files  = dir.collectFiles(source, {ignore:ignore});


mkdirp.sync(target);

// Parse each file
files = files.map(function(file) {
  var dox = parse(path.join(source, file), {});
  var targetName = file+'.'+target_extension;
  return {
    name:       file,
    targetName: targetName,
    dox:        dox,
    symbols:    symbols(dox, targetName)
  };
});

// Compute all symboles
var allSymbols = files.reduce(function(m, a){
  m = m.concat(a.symbols || []);
  return m;
}, []);

// Get package.json 
try{
  pkg = require(process.cwd() + '/package')
} catch (err) {
}

var readme = pkg && pkg.readme 
  , readMeFile = path.resolve(process.cwd(), program.readme || (pkg && pkg.readmeFileName) || 'README.md')

if(!readme && fs.existsSync(readMeFile)){
  readme = fs.readFileSync(readMeFile).toString()
} else {
  console.warn(new Error('No README.md file found at ' + readMeFile))
}

readme = readme || (pkg && pkg.description)

// Enable line-breaks ala github markdown
marked.setOptions({
  breaks: true,
  smartLists: true
})

// Get readme data
files.unshift({
  name:"Main",
  targetName: "index.html",
  readme: marked(readme),
  dox:[],
  symbols:[]
});

// Make sure the folder structure in target mirrors source
var folders = [];

files.forEach(function(file){
  var folder = file.targetName.substr(0, file.targetName.lastIndexOf(path.sep));

  if ((folder !== '') && (folders.indexOf(folder) === -1)) {
    folders.push(folder);
    mkdirp.sync(target + '/' + folder);
  }
});


// Render and write each file
files.forEach(function(file){

  // Set each files relName in relation to where this file is in the directory tree
  files.forEach(function(f){

    // Count how deep the current file is in relation to base
    var count = file.name.match(/\//g);
    count = count === null ? 0 : count.length;

    // relName is equal to targetName at the base dir
    f.relName = f.targetName;

    // For each directory in depth of current file add a ../ to the relative filename of this link
    while (count > 0) {
      f.relName = '../' + f.relName;
      count--;
    }

  });

  var title = program.title;

  if (!title) {
    title = pkg && pkg.name || 'Title Not Set'
  }

  var options = _.extend({}, file, {
    title:        title,
    allSymbols:   allSymbols,
    files:        files,
    currentName:  file.name
  });
  
  var compiled = compile(options);
  fs.writeFileSync(path.join(target, file.targetName), compiled);
});
